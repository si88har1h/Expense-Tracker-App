{"version":3,"sources":["components/UI/Card.js","components/Expenses/ExpensesFilter.js","components/Expenses/ExpenseDate.js","components/Expenses/ExpenseItem.js","components/Expenses/ExpensesList.js","components/Charts/ChartBar.js","components/Charts/Chart.js","components/Expenses/ExpensesChart.js","components/Expenses/Expenses.js","components/newExpense/ExpenseForm.js","components/newExpense/NewExpense.js","App.js","index.js"],"names":["Card","props","classes","className","children","ExpensesFilter","value","selected","onChange","event","onFilterYear","target","ExpenseDate","month","date","toLocaleString","day","year","getFullYear","ExpenseItem","title","amount","ExpensesList","item","length","map","expense","id","ChartBar","barFillHeight","maxValue","Math","round","style","height","label","Chart","dataPointValues","dataPoints","dataPoint","totalMaximum","max","ExpensesChart","chartDataPoints","expenses","getMonth","Expenses","useState","filterYear","setFilterYear","filteredExpenses","items","filter","toString","console","log","ExpenseForm","enteredTitle","setEnteredTitle","enteredAmount","setEnteredAmount","enteredDate","setEnteredDate","onSubmit","preventDefault","expenseData","Date","onSaveExpenseData","type","min","step","onClick","onStopEditing","NewExpense","isEditing","setIsEditing","enteredExpenseData","random","onExpenseDataCollection","DUMMY_EXPENSES","App","setExpenses","prevExpense","ReactDOM","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.5dda3a43.chunk.js","sourcesContent":["import \"./Card.css\";\r\nconst Card = (props) => {\r\n  const classes = \"card \" + props.className;\r\n  return <div className={classes}>{props.children}</div>;\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport \"./ExpensesFilter.css\";\r\n\r\nconst ExpensesFilter = (props) => {\r\n  const dropDownHandler = (event) => {\r\n    props.onFilterYear(event.target.value);\r\n  };\r\n  return (\r\n    <div className=\"expenses-filter\">\r\n      <div className=\"expenses-filter__control\">\r\n        <label>Filter by year</label>\r\n        <select value={props.selected} onChange={dropDownHandler}>\r\n          <option value=\"2022\">2022</option>\r\n          <option value=\"2021\">2021</option>\r\n          <option value=\"2020\">2020</option>\r\n          <option value=\"2019\">2019</option>\r\n        </select>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ExpensesFilter;\r\n","import \"./ExpenseDate.css\";\r\n\r\nconst ExpenseDate = (props) => {\r\n  const month = props.date.toLocaleString(\"en-US\", { month: \"long\" });\r\n  const day = props.date.toLocaleString(\"en-US\", { day: \"2-digit\" });\r\n  const year = props.date.getFullYear();\r\n\r\n  return (\r\n    <div className=\"expense-date\">\r\n      <div className=\"expense-date__month\">{month}</div>\r\n      <div className=\"expense-date__year\">{year}</div>\r\n      <div className=\"expense-date__day\">{day}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ExpenseDate;\r\n","import \"./ExpenseItem.css\";\r\nimport ExpenseDate from \"./ExpenseDate\";\r\nimport Card from \"../UI/Card\";\r\n\r\nconst ExpenseItem = (props) => {\r\n  return (\r\n    <li>\r\n      <Card className=\"expense-item\">\r\n        <ExpenseDate date={props.date} />\r\n        <div className=\"expense-item__description\">\r\n          <h2>{props.title}</h2>\r\n          <div className=\"expense-item__price\">â‚¹{props.amount}</div>\r\n        </div>\r\n      </Card>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default ExpenseItem;\r\n","import \"./ExpensesList.css\";\r\nimport ExpenseItem from \"./ExpenseItem\";\r\n\r\nconst ExpensesList = (props) => {\r\n  if (props.item.length === 0) {\r\n    return <h2 className=\"expenses-list__fallback\">Found no expenses.</h2>;\r\n  }\r\n\r\n  return (\r\n    <ul className=\"expenses-list\">\r\n      {props.item.map((expense) => (\r\n        <ExpenseItem\r\n          key={expense.id}\r\n          title={expense.title}\r\n          amount={expense.amount}\r\n          date={expense.date}\r\n        />\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default ExpensesList;\r\n","import \"./ChartBar.css\";\r\n\r\nconst ChartBar = (props) => {\r\n  let barFillHeight = \"0%\";\r\n  if (props.maxValue > 0) {\r\n    barFillHeight = Math.round((props.value / props.maxValue) * 100) + \"%\";\r\n  }\r\n  return (\r\n    <div className=\"chart-bar\">\r\n      <div className=\"chart-bar__inner\">\r\n        <div\r\n          className=\"chart-bar__fill\"\r\n          style={{ height: barFillHeight }}\r\n        ></div>\r\n      </div>\r\n      <div className=\"chart-bar__label\">{props.label}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChartBar;\r\n","import \"./Chart.css\";\r\nimport ChartBar from \"./ChartBar\";\r\nconst Chart = (props) => {\r\n  const dataPointValues = props.dataPoints.map((dataPoint) => dataPoint.value);\r\n  const totalMaximum = Math.max(...dataPointValues);\r\n  return (\r\n    <div className=\"chart\">\r\n      {props.dataPoints.map((dataPoint) => (\r\n        <ChartBar\r\n          key={dataPoint.label}\r\n          value={dataPoint.value}\r\n          maxValue={totalMaximum}\r\n          label={dataPoint.label}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chart;\r\n","import Chart from \"../Charts/Chart\";\r\nconst ExpensesChart = (props) => {\r\n  const chartDataPoints = [\r\n    {\r\n      label: \"Jan\",\r\n      value: 0,\r\n    },\r\n    {\r\n      label: \"Feb\",\r\n      value: 0,\r\n    },\r\n    {\r\n      label: \"Mar\",\r\n      value: 0,\r\n    },\r\n    {\r\n      label: \"Apr\",\r\n      value: 0,\r\n    },\r\n    {\r\n      label: \"May\",\r\n      value: 0,\r\n    },\r\n    {\r\n      label: \"Jun\",\r\n      value: 0,\r\n    },\r\n    {\r\n      label: \"Jul\",\r\n      value: 0,\r\n    },\r\n    {\r\n      label: \"Aug\",\r\n      value: 0,\r\n    },\r\n    {\r\n      label: \"Sep\",\r\n      value: 0,\r\n    },\r\n    {\r\n      label: \"Oct\",\r\n      value: 0,\r\n    },\r\n    {\r\n      label: \"Nov\",\r\n      value: 0,\r\n    },\r\n    {\r\n      label: \"Dec\",\r\n      value: 0,\r\n    },\r\n  ];\r\n  for (const expense of props.expenses) {\r\n    const expenseMonth = expense.date.getMonth();\r\n    chartDataPoints[expenseMonth].value += expense.amount;\r\n  }\r\n\r\n  return <Chart dataPoints={chartDataPoints} />;\r\n};\r\n\r\nexport default ExpensesChart;\r\n","import \"./Expenses.css\";\r\nimport Card from \"../UI/Card\";\r\nimport { useState } from \"react\";\r\nimport ExpensesFilter from \"./ExpensesFilter\";\r\nimport ExpensesList from \"./ExpensesList\";\r\nimport ExpensesChart from \"./ExpensesChart\";\r\n\r\nconst Expenses = (props) => {\r\n  const [filterYear, setFilterYear] = useState(\"2020\");\r\n\r\n  const getFilterYear = (filterYear) => {\r\n    console.log(\"Expenses.js\", filterYear);\r\n    setFilterYear(filterYear);\r\n  };\r\n  const filteredExpenses = props.items.filter((expense) => {\r\n    return expense.date.getFullYear().toString() === filterYear;\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <Card className=\"expenses\">\r\n        <ExpensesFilter selected={filterYear} onFilterYear={getFilterYear} />\r\n        <ExpensesChart expenses={filteredExpenses} />\r\n        <ExpensesList item={filteredExpenses} />\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Expenses;\r\n","import \"./ExpenseForm.css\";\r\nimport { useState } from \"react\";\r\nconst ExpenseForm = (props) => {\r\n  const [enteredTitle, setEnteredTitle] = useState(\"\");\r\n  const [enteredAmount, setEnteredAmount] = useState(\"\");\r\n  const [enteredDate, setEnteredDate] = useState(\"\");\r\n  //   const [userInput, setUserInput] = useState({\r\n  //     enteredTitle: \"\",\r\n  //     enteredAmount: \"\",\r\n  //     enteredDate: \"\",\r\n  //   });\r\n\r\n  const titleChangeHandler = (event) => {\r\n    setEnteredTitle(event.target.value);\r\n    // setUserInput({ ...userInput, enteredTitle: event.target.value });\r\n    // setUserInput((prevState) => {\r\n    //   return { ...prevState, enteredTitle: event.target.value };\r\n    // });\r\n  };\r\n  const amountChangeHandler = (event) => {\r\n    setEnteredAmount(event.target.value);\r\n    // setUserInput({ ...userInput, enteredAmount: event.target.value });\r\n    // setUserInput((prevState) => {\r\n    //   return { ...prevState, enteredAmount: event.target.value };\r\n    // });\r\n  };\r\n  const dateChangeHandler = (event) => {\r\n    setEnteredDate(event.target.value);\r\n    // setUserInput({ ...userInput, enteredDate: event.target.value });\r\n    // setUserInput((prevState) => {\r\n    //   return { ...prevState, enteredDate: event.target.value };\r\n    // });\r\n  };\r\n\r\n  const submitHandler = (event) => {\r\n    event.preventDefault(); //to prevent the page from reloading after pressing submit button\r\n\r\n    const expenseData = {\r\n      title: enteredTitle,\r\n      amount: +enteredAmount,\r\n      date: new Date(enteredDate),\r\n    };\r\n    props.onSaveExpenseData(expenseData);\r\n\r\n    setEnteredTitle(\"\");\r\n    setEnteredAmount(\"\");\r\n    setEnteredDate(\"\");\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={submitHandler}>\r\n      <div className=\"new-expense__controls\">\r\n        <div className=\"new-expense__control\">\r\n          <label>Title</label>\r\n          <input\r\n            type=\"text\"\r\n            value={enteredTitle}\r\n            onChange={titleChangeHandler}\r\n          />\r\n        </div>\r\n        <div className=\"new-expense__control\">\r\n          <label>Amount</label>\r\n          <input\r\n            type=\"number\"\r\n            min=\"0.01\"\r\n            step=\"0.01\"\r\n            value={enteredAmount}\r\n            onChange={amountChangeHandler}\r\n          />\r\n        </div>\r\n        <div className=\"new-expense__control\">\r\n          <label>Date</label>\r\n          <input\r\n            type=\"date\"\r\n            min=\"2019-01-01\"\r\n            max=\"2023-12-31\"\r\n            value={enteredDate}\r\n            onChange={dateChangeHandler}\r\n          />\r\n        </div>\r\n      </div>\r\n      <div className=\"new-expense__actions\">\r\n        <button type=\"button\" onClick={props.onStopEditing}>\r\n          Cancel\r\n        </button>\r\n        <button type=\"submit\">Add Expense</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default ExpenseForm;\r\n","import ExpenseForm from \"./ExpenseForm\";\r\nimport \"./NewExpense.css\";\r\nimport { useState } from \"react\";\r\n\r\nconst NewExpense = (props) => {\r\n  const [isEditing, setIsEditing] = useState(false);\r\n  const saveExpenseDataHandler = (enteredExpenseData) => {\r\n    const expenseData = {\r\n      ...enteredExpenseData,\r\n      id: Math.random().toString(),\r\n    };\r\n    props.onExpenseDataCollection(expenseData);\r\n    setIsEditing(false);\r\n  };\r\n\r\n  const startEditingHandler = () => {\r\n    setIsEditing(true);\r\n  };\r\n  const stopEditingHandler = () => {\r\n    setIsEditing(false);\r\n  };\r\n  return (\r\n    <div className=\"new-expense\">\r\n      {!isEditing && (\r\n        <button onClick={startEditingHandler}>Add new expense</button>\r\n      )}\r\n      {isEditing && (\r\n        <ExpenseForm\r\n          onSaveExpenseData={saveExpenseDataHandler}\r\n          onStopEditing={stopEditingHandler}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NewExpense;\r\n","import Expenses from \"./components/Expenses/Expenses\";\nimport NewExpense from \"./components/newExpense/NewExpense\";\nimport { useState } from \"react\";\n\nconst DUMMY_EXPENSES = [\n  {\n    id: \"e1\",\n    title: \"Snacks\",\n    amount: 94.12,\n    date: new Date(2022, 7, 14),\n  },\n];\nconst App = () => {\n  const [expenses, setExpenses] = useState(DUMMY_EXPENSES);\n\n  const ExpenseDataCollectionHandler = (expenseData) => {\n    setExpenses((prevExpense) => {\n      return [expenseData, ...prevExpense];\n    });\n  };\n\n  return (\n    <div>\n      <NewExpense onExpenseDataCollection={ExpenseDataCollectionHandler} />\n      <Expenses items={expenses} />\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from \"react-dom/client\";\n\nimport \"./index.css\";\nimport App from \"./App\";\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(<App />);\n"],"sourceRoot":""}